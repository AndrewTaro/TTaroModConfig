(def constant TT_ELEMENT_NAME "'ttaroModConfig'")
(def constant TT_CONFIG_WINDOW_WIDTH 480px)
(def constant TT_CONFIG_SECTION_MARGIN 20px)

(def constant TT_CONFIG_OPTION_WIDTH 205px) #Sum of the following consts
(def constant TT_CONFIG_OPTION_CONTROL_WIDTH 140px)
(def constant TT_CONFIG_OPTION_VALUE_WIDTH 40px)
(def constant TT_CONFIG_OPTION_VALUE_MARGIN 7px)
(def constant TT_CONFIG_RESET_BUTTON_SIZE 18px)
(def constant TT_CONFIG_COLOR_PALETTE_SIZE 30px)

(def constant TT_ELEMENT_SIZE {
	WIDTH: 50,
	HEIGHT: 30
})

(def constant TT_CONFIG_RENDERERS {
	SWITCH				: 'TT_SwitchOptionElement',
	SLIDER				: 'TT_SliderOptionElement',
	DROPDOWN			: 'TT_DropdownOptionElement',

	MINIMAP_SWITCH		: 'TT_MinimapSwitchOptionElement',
	MINIMAP_SLIDER		: 'TT_MinimapSliderOptionElement',
	MINIMAP_DROPDOWN	: 'TT_MinimapDropdownOptionElement',
})

(def constant TT_DROPWDOWN_RENDERERS {
	COLOR_PALETTE: {
		DROPDOWN	: 'TT_ColorPaletteDropdownElement' ,
		ITEM		: 'TT_DropdownColorPaletteItemRendererElement' ,
		CHOSEN_ITEM	: 'TT_DropdownChosenColorItemRendererElement' ,
	},
	COLOR_TEXT: {
		# DROPDOWN	: use default
		ITEM		: 'TT_DropdownColorItemRendererElement' ,
		CHOSEN_ITEM	: 'TT_DropdownChosenColorItemRendererElement' ,
	},
	KEY: {
		# DROPDOWN	: use default
		ITEM		: 'TT_DropdownKeyItemRendererElement' ,
		CHOSEN_ITEM	: 'TT_DropdownChosenKeyItemRendererElement' ,
	},
	CUSTOM_TEXT: {
		# DROPDOWN	: use default
		ITEM		: 'TT_DropdownTextItemRendererElement' ,
		CHOSEN_ITEM	: 'TT_DropdownChosenTextItemRendererElement' ,
	},
})

(def element TTaroModConfig() layout=true
	(scope
		(var defaultPos:dict = "{'positionX': 200, 'positionY': 0}")
		(macro DRAGGABLE_GET_DROP_POSITION _wndName="TT_ELEMENT_NAME" _defaults="defaultPos")
	)

	(block
		(style
			(position = "absolute")
			(bind left "dragPosX")
			(bind top "dragPosY")
			(width = "TT_ELEMENT_SIZE.WIDTH")
			(height = "TT_ELEMENT_SIZE.HEIGHT")
		)
		(element ModDraggableElement _wndName="TT_ELEMENT_NAME" _defaults="defaultPos" _elmSize="{width: TT_ELEMENT_SIZE.WIDTH, height: TT_ELEMENT_SIZE.HEIGHT}")
		(hblock
			(element TT_OptionButtonElement)
			(element TT_DragTitleElement)
		)
	)
)

(def element TT_OptionButtonElement () layout=true
	(scope
		(event evHideInfotip)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(macro TT_GET_UPREFS)
	)
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))

	(controller $Tooltip
		(renderer='TT_ModConfigsWindowElement')
		(args _userPrefsNum = "_userPrefsNum")
		(macro TT_CONFIG_BEHAVIOUR)
	)

	(style
		(width = 30)
		(height = 30)
	)
	
	(element ButtonSettingsSmall
		(style
			(position = "absolute")
			(left = "3px")
			(top = "3px")
			(bind alpha "isMouseActive ? 1.0 : 0.4")
		)
	)
)

(def element TT_ModConfigsWindowElement (_userPrefsNum:gfx=null)layout=true
	(scope
		(event evTabClicked)
		(var selectedIndex:number = "-1")
		(bind selectedIndex "$event.index" init=false (event "evTabClicked"))

		(var languageOptions:dict = "{key: TT_ELEMENT_NAME + 'Language', dropdownItems: TT_CONFIG_LANGUAGES, default: 0}")
	)

	(style 
		(align = "middle|center")
		(width = "TT_CONFIG_WINDOW_WIDTH + 4") # +4 for side
	)

	(element TT_BackgroundElement)

	#Tab Buttons
	(block
		(style
			(align = "middle|center")
			(height = "40px")
			(marginLeft = "-TT_CONFIG_OPTION_CONTROL_WIDTH + 16")
		)
		(element TT_DropdownOptionElement _pref="languageOptions" _userPrefsNum="_userPrefsNum")
	)
	(hblock
		(style
			(flow = "Flow.TILE_HORIZONTAL")
			(width="TT_CONFIG_WINDOW_WIDTH")
			(align="center")
		)
		(controller $Repeat renderer='TabButton'
			(bind count "TT_MODS_CONFIG_LIST.length")
			(args
				_label="TT_MODS_CONFIG_LIST[$index].modName"
				_isSelected="$index == selectedIndex"
				_width="120px"
				_dispatchedEv="'evTabClicked'"
				_dispatchParams="{index: $index}"
				_name="'TTaroModConfigTabButton' + TT_MODS_CONFIG_LIST[$index].modName"
				_isDisabled="!TT_MODS_CONFIG_LIST[$index].isInstalled"
			)
		)
	)

	#Config Elements
	#DO NOT USE PEPEAT!: IT freezes the screen as the number of elements increases
	#(element TT_ModConfigsElement "TT_MODS_CONFIG_LIST[selectedIndex]" _userPrefsNum="_userPrefsNum")
	(controller $Instance (renderer='TT_ModConfigsElement')
		(bind enabled "selectedIndex >= 0")
		(bindcall recreate (bind trigger "selectedIndex"))
		(args
			_modConfigsData = "TT_MODS_CONFIG_LIST[selectedIndex]"
			_userPrefsNum   = "_userPrefsNum"
		)
	)
)

(def element TT_ModConfigsElement (_modConfigsData:dict, _userPrefsNum:gfx=null)layout=true
	(scope
		(macro MOUSE_HANDLER_SCOPE) #THIS IS MANDATORY FOR SCROLL IN BATTLE
		(macro STAGE_SIZE)
		(var clampedMaxHeight:number = "min(stageHeight - 300, stageHeight * 0.7)")
	)
	(style
		(align = "middle|center")
		(width="TT_CONFIG_WINDOW_WIDTH")
		(marginBottom = 15px)
		#(maxHeight = 800)
	)

	(controller $Animation
		(bindcall play duration="0.25"  from={alpha:0} to={alpha:1} watch=false action="killAll" easing="Easing.cubic_in" (bind trigger "_modConfigsData"))
	)

	# THIS IS MANDATORY FOR SCROLL IN BATTLE
	(bindcall externalCall 'inputMapping.onAction' "['battleChat.rollOverChanged', { rollOver: rollOver }]" init=false watch=false (bind trigger "rollOver"))
	(macro MOUSE_EVENTS_DISPATCHER)
	# THIS IS MANDATORY FOR SCROLL IN BATTLE

	(scrollArea
		(style
			(backgroundColor = 0x01000000) #THIS IS MANDATORY FOR SCROLL IN BATTLE
			(width = "TT_CONFIG_WINDOW_WIDTH")
			(bind maxHeight "clampedMaxHeight")
			# Use stageHeight instead of constant
			# so that the tooltip doesn't disappear on the resolution of Windows XP era...
			# Apparently the game's minimum requirement is 1280x720
			# :(
		)

		(verticalSlider='ScrollBarVLight')
		(topShadow='ScrollAreaShadowTop')
		(bottomShadow='ScrollAreaShadowBottom')

		(activeControlsAlpha=0.7)
		(inactiveControlsAlpha=0.2)
		
		(wheelScrollSpeed = "1.5")
		(wheelScrollAcceleration = "0.9")
		(maxScrollingAnimatedDistance = "150")

		(animationDuration=0.2)
		(animationEasing="Easing.cubic_out")

		(hscrollPolicy='off')
		(vscrollPolicy='auto')
		(repeatController='TT_SectionElementRepeat')

		(content
			(style
				(width = "TT_CONFIG_WINDOW_WIDTH")
				(align = "middle|center")
			)

			(controller $Repeat renderer='TT_SectionElement' name='TT_SectionElementRepeat'
				(bind count "_modConfigsData.configSections.length")
				(args
					_sectionData  = "_modConfigsData.configSections[$index]"
					_userPrefsNum = "_userPrefsNum"
				)
			)
		)
	)
)

(def element TT_SectionElement (_sectionData:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(var isSectionEnabled:bool = false)

		(controller $Animation		
			(bindcall play
				delay = "$index * 0.1"
				duration = "0.001"
				from	 = "{ isSectionEnabled: false }"
				to		 = "{ isSectionEnabled: true }"
				init	 = true
			)
		)

		(macro TT_GET_LANGUAGE_INDEX)
		
		(var sectionSettings:dict = "'sectionSettings' in _sectionData ? _sectionData.sectionSettings : {}")
		(var isConfigurable:bool = "'isEnabled' in sectionSettings ? sectionSettings.isEnabled : true")
		(var tooltipHint:str = "'tooltipHint' in sectionSettings ? sectionSettings.tooltipHint : ''")
		(var tooltipExtraData:str = "'tooltipExtraData' in sectionSettings ? sectionSettings.tooltipExtraData : ''")
		(var hintTranslations:array = "tooltipHint ? TT_CONFIG_LOCALIZATIONS[tooltipHint] : []")
		(var isHintValidLocalization:bool = "hintTranslations.length > languageIndex && !isIn(hintTranslations[languageIndex], ['', ' '])")
		(var localizedHintText:str = "isHintValidLocalization ? hintTranslations[languageIndex] : hintTranslations[0]")
	)

	(bind visible "isSectionEnabled")

	(style
		(align = "middle|center")
		(width = 90%)
		(marginBottom = "TT_CONFIG_SECTION_MARGIN")
		(bind marginTop "$index == 0 ? TT_CONFIG_SECTION_MARGIN : 0")
		(backgroundColor = 0x01000000) # For hittest
	)

	(element TT_SectionTitleElement _data="_sectionData" _userPrefsNum="_userPrefsNum")

	(macro TT_HORIZONTAL_DEVIDER)

	(controller $Repeat renderer='TT_ConfigElement'
		(bind enabled "isSectionEnabled")
		(bind count "_sectionData.sectionElements.length")
		(args 
			_pref   		= "_sectionData.sectionElements[$index]"
			_isConfigurable	= "isConfigurable"
			_userPrefsNum	= "_userPrefsNum"
		)
	)

	(controller $Tooltip (renderer = 'DescriptionStatusLineTooltip')
		(bind enabled "!isConfigurable")
		(args
			_descriptionText = "localizedHintText"
			_statusText = "tooltipExtraData"
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
		)
		(macro TT_TOOLTIP_BEHAVIOUR)
	)
)

(def element TT_ConfigElement (_pref:dict, _isConfigurable:bool, _userPrefsNum:gfx=null)layout=true
	(scope
		(var dividerPos:number = "'divider' in _pref ? _pref.divider : -1")
		(var hasTopDivider:bool = "top == dividerPos")
		(var hasBottomDivider:bool = "bottom == dividerPos")
		
		(event evChangeParentPref)
		(var parentPrefs:array = "'parentPrefs' in _pref ? _pref.parentPrefs : []")
		(var parentPrefsCount:number = "parentPrefs.length")

		# The elements inside will be recreated but the scope variables remain?
		# Switching between tabs will screw up this counter.
		(var enabledParentPrefCount:number = 0)
		(var isOptionEnabled:bool = "parentPrefsCount == 0 ? true : enabledParentPrefCount > 0") # or condition. For and, use parentPrefsCount == enabledParentPrefsCount
		
		(bind enabledParentPrefCount "enabledParentPrefCount + $event.isEnabled" watch=false init=false (event "evChangeParentPref"))

		(var isConfigInitialized:bool = false)
		(var targetAlpha:number = "_isConfigurable && isOptionEnabled ? 1.0 : 0.3")

		(controller $Animation
			(bindcall play
				delay = "$index * 0.03"
				duration = "0.001"
				from	 = "{ isConfigInitialized: false }"
				to		 = "{ isConfigInitialized: true }"
				init	 = true
			)
		)

		# For tooltip hint
		(macro TT_GET_LANGUAGE_INDEX)
		(var hintKey:str = "'tooltipHint' in _pref ? _pref.tooltipHint : null")
		(var hintTranslations:array = "hintKey ? TT_CONFIG_LOCALIZATIONS[hintKey] : []")
		(var isHintValidLocalization:bool = "hintTranslations.length > languageIndex && !isIn(hintTranslations[languageIndex], ['', ' '])")
		(var localizedHintText:str = "isHintValidLocalization ? hintTranslations[languageIndex] : hintTranslations[0]")

		(macro MOUSE_HANDLER_SCOPE)
	)

	# Config Checker
	(controller $Repeat renderer='TT_ParentPrefCheckerElement'
		(bind enabled "parentPrefsCount > 0")
		(bind count "parentPrefsCount")
		(args _parentPref="parentPrefs[$index]" _userPrefsNum="_userPrefsNum")
	)
	#

	(macro MOUSE_EVENTS_DISPATCHER)

	(style
		(width = 96%)
		(bind hitTest "_isConfigurable && isOptionEnabled")
	)

	(controller $Instance renderer='TT_HorizontalDivider'
		(bind enabled "hasTopDivider")
	)

	(block
		(style
			(alpha = 0)
			(width = 100%)
		)
		(controller $Animation
			(bindcall play
				duration = "0.2"
				to = "{ alpha: targetAlpha }"
				watch=true
				action="killAll"
				(bind trigger "isConfigInitialized")
			)
		)

		# BG
		(block
			# For background highlight
			(class $FullsizeAbsolute)
			(style
				(backgroundColor = 0x1FFFFFFF)
				(alpha = 0)
			)
			(controller $Animation
				(bindcall play
					duration = 0.1
					to		 = { alpha: 1 }
					action="killAll"
					(event "evRollOver")
				)
				(bindcall play
					duration = 0.1
					to		 = { alpha: 0 }
					action="killAll"
					(event "evRollOut")
				)
			)
		)

		# Main: title and option
		(hblock
			(style
				(align = "middle|center")
				(width = 100%) #~~it breaks layout for some reason~~ parent element must have width. In this case the width=100% above^
				(marginBottom = 4px)
				(marginTop = 4px)
				(backgroundColor = 0x01000000) # For tooltip hittest
			)
			

			(element TT_ConfigTitleElement _data="_pref" _userPrefsNum="_userPrefsNum")

			(controller $Instance
				(bind renderer "_pref.renderer")
				(bind enabled "isConfigInitialized")
				(args
					_pref="_pref"
					_userPrefsNum="_userPrefsNum"
				)
			)
		)

		# Hint
		(controller $Tooltip (renderer = 'RepeatStatusTooltip')
			# SimpleStatus does not support multilines.
			(bind enabled "hintKey")
			(args
				_tooltipDataArray="[{text: localizedHintText, unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.INFO}]"
				_text = "localizedHintText"
				_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.INFO"
			)
			(macro TT_TOOLTIP_BEHAVIOUR)
		)
	)

	(controller $Instance renderer='TT_HorizontalDivider'
		(bind enabled "hasBottomDivider")
	)
)

(def element TT_ParentPrefCheckerElement (_parentPref:dict, _userPrefsNum:gfx=null) layout=false
	(scope
		(event evChangeParentPref)

		(var validValues:array = "'validValues' in _parentPref ? _parentPref.validValues : []")
		(var pref:dict = "'pref' in _parentPref ? _parentPref.pref : {}")
		(var key:str = "'key' in pref ? pref.key : ''")
		(var default:number = "'default' in pref ? pref.default : -1")

		# For minimap
		# (var isMinimapOption:bool = "'isMinimapOption' in _parentPref ? _parentPref.isMinimapOption : false")
		# (var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.minimapOption, key)")
		# (var optionEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))
		# (var minimapOption:gfx = "optionEntity ? optionEntity.minimapOption : null")
		# (var mapPrefValue:number = "minimapOption ? minimapOption.value > 0 : default" (event "minimapOption.evValueChanged"))

		# For userprefs
		(var value:number = "isNumber(_userPrefsNum[key]) ? round(_userPrefsNum[key]) : default")

		# (var value:number = "isMinimapOption ? mapPrefValue : userPrefValue")
		(var isOptionEnabled:bool = "value in validValues")

		# The elements inside will be recreated but the scope variables remain?
		# Switching between tabs will screw up this counter.
		#
		# init=true does not trigger when the element is reused.
		(var isFirstTime:bool = true)
		(bind isFirstTime "false" watch=false init=false (event "evChangeParentPref"))
	)

	(dispatch evChangeParentPref dir="EventDirection.UP" args="{isEnabled: isOptionEnabled ? 1 : -1}" watch=false init=false (bind trigger "isOptionEnabled"))

	# For init only!
	# Dont decrement the count for the first time
	(dispatch evChangeParentPref dir="EventDirection.UP" args="{isEnabled: isOptionEnabled ? 1 : 0}" watch=false on=addedToStage (bind enabled "isFirstTime"))
)

(def element TT_DragTitleElement () layout=true
	(scope
		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))
	)
	(tf
		(class $TextDefaultBold)
		(bind text "'T'")
		(style
			(bind alpha "isMouseActive ? 0.6 : 0.0")
			(hitTest = false)
			(fontSize = 18)
		)
	)
)

(def element TT_SectionTitleElement (_data:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(var titleKey:str = "_data.sectionTitle")
		(var translations:array = "TT_CONFIG_LOCALIZATIONS[titleKey]")
		(macro TT_GET_LANGUAGE_INDEX)
		(var isInGameString:bool = "tr(titleKey) != titleKey")
		(var titleColor:number = "'titleColor' in _data ? _data.titleColor : 0xFFFFFF")
		(var isValidLocalization:bool = "translations.length > languageIndex && !isIn(translations[languageIndex], ['', ' '])")
		(var localizedTitleText:str = "isValidLocalization ? translations[languageIndex] : translations[0]")
	)
	(style
		(width = 100%)
		#(align = "middle|center")
	)
	(tf
		(class $TextDefaultBold)
		(bind text "isInGameString ? tr(titleKey) : localizedTitleText")
		(style
			(fontSize = 21)
			#(textAlign = "center")
			(width = 100%)
			(bind textColor "titleColor")
		)
	)
)

(def element TT_ConfigTitleElement (_data:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(var titleKey:str = "_data.configTitle")
		(var titleTranslations:array = "TT_CONFIG_LOCALIZATIONS[titleKey]")
		(macro TT_GET_LANGUAGE_INDEX)
		(var isInGameString:bool = "tr(titleKey) != titleKey")
		(var titleColor:number = "'titleColor' in _data ? _data.titleColor : 0xFFFFFF")
		(var isTitleValidLocalization:bool = "titleTranslations.length > languageIndex && !isIn(titleTranslations[languageIndex], ['', ' '])")
		(var localizedTitleText:str = "isTitleValidLocalization ? titleTranslations[languageIndex] : titleTranslations[0]")

		(var hasTooltip:bool = "'tooltipHint' in _data && _data.tooltipHint ? true : false")
	)
	(style
		(width = 50%)
	)
	(hblock
		(style
			(width = 100%)
			(align = "middle|center")
		)
		(tf
			(bind text "isInGameString ? tr(titleKey) : localizedTitleText")
			(class $TextDefault)
			(style
				(width = 100%)
				(leading = -5)
				(bind textColor "titleColor")
			)
		)
		(block
			(bind visible "hasTooltip")
			(style
				(width = 19px) (height = 19px) (backgroundSize = "fill")
				(marginLeft = 5px) (marginRight = 5px)
				(bind backgroundImage "'url:../service_kit/unified_status_icons/icon_info.png'")
			)
		)
	)
)

(def element TT_SwitchOptionElement (_pref:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		#(macro TT_GET_UPREFS)
		(var prefKey:str = "'key' in _pref ? _pref.key : '' ")
		(var defaultValue:number = "'default' in _pref ? _pref.default : false")
		(var prefValue:number = "isNumber(_userPrefsNum[prefKey]) ? round(_userPrefsNum[prefKey]) : defaultValue")
		(var resetMethods:array = "[{type: 'inputMapping.onAction', name: 'setUserPref', args: {'value': toNumber(defaultValue) + 0.00001, 'name': 'chatBoxWidth', 'subName': prefKey}}]")
		(var saveMethods:array = "[{type: 'inputMapping.onAction', name: 'setUserPref', args: {'value': toNumber(!prefValue) + 0.00001, 'name': 'chatBoxWidth', 'subName': prefKey}}]")
	)

	(style
		(width = "50%")
	)

	(hblock
		(style
			(width = "TT_CONFIG_OPTION_WIDTH")
			(height = "23px")
			(align = "left|middle")
		)
		(hblock
			(style
				(width = "TT_CONFIG_OPTION_CONTROL_WIDTH")
				(align = "middle|center")
				(marginRight = "TT_CONFIG_OPTION_VALUE_WIDTH + TT_CONFIG_OPTION_VALUE_MARGIN")
			)
			(element SwitchWithoutLabel
				_state = "prefValue"
				_methods = "saveMethods"
			)
		)

		(controller $Instance renderer='ImageButton'
			(bind enabled "prefValue != defaultValue")
			(args
				_width = "TT_CONFIG_RESET_BUTTON_SIZE"
				_height = "TT_CONFIG_RESET_BUTTON_SIZE"
				_backgroundImage = 'url:../service_kit/buttons/context/update.png'
				_tooltipText = "'IDS_PREFERENCES_CONTEXT_PREF_RESET'"
				_methods = "resetMethods"
			)
		)
	)
)

(def element TT_SliderOptionElement (_pref:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(event evSliderValueChanged) #slider event
		(event evValueReset) #image button event
		(event evShow)
		(var prefKey:str = "'key' in _pref ? _pref.key : '' ")
		(var minValue:number = "'min' in _pref ? _pref.min : 0")
		(var maxValue:number = "'max' in _pref ? _pref.max : 10")
		(var minLabel:str = "'minLabel' in _pref ? _pref.minLabel : ''")
		(var maxLabel:str = "'maxLabel' in _pref ? _pref.maxLabel : ''")
		(var step:number = "'step' in _pref ? _pref.step : 1")
		(var steps:number = "round((maxValue - minValue) / step)")
		(var default:number = "'default' in _pref ? _pref.default : 0")
		(var defaultValue:number = "round((default - minValue) / step)")
		(var rounding:number = "'round' in _pref ? _pref.round : 2")
		#watch=false is necessary to prevent the slider from flickering
		(var prefValue:number = "isNumber(_userPrefsNum[prefKey]) ? round(_userPrefsNum[prefKey]) : defaultValue" watch=false (event "evShow"))
		(bind prefValue "$event.value" watch=false init=false (event "evValueReset")(event "evSliderValueChanged"))
		(var isMinLabelAvailable:bool = "prefValue == 0 && minLabel")
		(var isMaxLabelAvailable:bool = "prefValue == steps && maxLabel")
		(var displayedCount:str = "	isMinLabelAvailable ? minLabel :
									isMaxLabelAvailable ? maxLabel :
									formatFloatingPoint(minValue + prefValue * step, rounding)"
		)

		# Creating this dict here with init=true will prevent
		# triggering setUserPrefs every single time the elemnt is added to stage.
		#
		# Directly using $event.value will trigger the change event, even if the value is the same as before.
		# Because, obviously, the value is not in scope. There is no way for Unbound to detect a change.
		#
		# Dict updates only when prefValue changes.
		# Thus, if the value loaded from userPref is equal to current value, the update event will not happen.
		(var prefData:dict = "{value: prefValue + 0.00001, name: 'chatBoxWidth', subName: prefKey}")
	)
	(dispatch evShow args="{}" on='addedToStage')

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', prefData]" init=false)

	(style
		(width = "50%")
	)

	(hblock
		(style
			(width = "TT_CONFIG_OPTION_WIDTH")
			(height = "23px")
			(align = "left|middle")
		)
		(hblock
			(style
				#(width = "TT_CONFIG_OPTION_CONTROL_WIDTH")
				(align = "middle|center")
			)
			(element DefaultSlider
				_value = "prefValue"
				_intervalsCount = "steps"
				_unitsInStepInterval = "step"
				_width = "TT_CONFIG_OPTION_CONTROL_WIDTH"
			)
			(tf
				(class $TextDefault)
				(alpha = "TA")
				(bind text "displayedCount")
				(style
					(textAlign = "right")
					(marginRight = "TT_CONFIG_OPTION_VALUE_MARGIN")
					(width = "TT_CONFIG_OPTION_VALUE_WIDTH")
				)
			)
		)
		(block
			(bind visible "prefValue != defaultValue")
			(controller $Instance renderer='ImageButton'
				(args
					_width = "TT_CONFIG_RESET_BUTTON_SIZE"
					_height = "TT_CONFIG_RESET_BUTTON_SIZE"
					_backgroundImage = 'url:../service_kit/buttons/context/update.png'
					_tooltipText = "'IDS_PREFERENCES_CONTEXT_PREF_RESET'"
					_dispatchedEv = "'evValueReset'"
					_dispatchParams = "{'value': defaultValue}"
				)
			)
		)
	)
)

(def element TT_DropdownOptionElement (_pref:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(event ItemChooser_ValueSelected)
		(event evMenuClosed) #To close dropdown menu when parent tooltip is closed

		(var prefKey:str = "'key' in _pref ? _pref.key : '' ")
		
		(var type:str = "'dropdownType' in _pref ? _pref.dropdownType : ''")
		(var renderers:dict = "type in TT_DROPWDOWN_RENDERERS ? TT_DROPWDOWN_RENDERERS[type] : {}")
		(var dropdownRenderer:str = "'DROPDOWN' in renderers ? renderers.DROPDOWN : 'ItemChooserDropdown'")
		(var itemRenderer:str = "'ITEM' in renderers ? renderers.ITEM : 'TextListItemRenderer'")
		(var chosenItemRenderer:str = "'CHOSEN_ITEM' in renderers ? renderers.CHOSEN_ITEM : 'DefaultItemChooserPickedItemRenderer'")

		(var defaultValue:number = "'default' in _pref ? _pref.default : 0")
		(var items:array = "'dropdownItems' in _pref ? _pref.dropdownItems : []")
		
		(var extraData:dict = "'extraData' in _pref ? _pref.extraData : {}")
		(var prefValue:number = "isNumber(_userPrefsNum[prefKey]) ? round(_userPrefsNum[prefKey]) : defaultValue")
		(var resetMethods:array = "[{type: 'inputMapping.onAction', name: 'setUserPref', args: {'value': defaultValue + 0.00001, 'name': 'chatBoxWidth', 'subName': prefKey}}]")
	)

	(style
		(width = "50%")
	)

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': $event.selectedIndex + 0.00001, 'name': 'chatBoxWidth', 'subName': prefKey}]" init=false watch=false (event "ItemChooser_ValueSelected"))
	(dispatch evMenuClosed dir="EventDirection.DOWN" args="{}" on='removedFromStage') #To close dropdown menu when parent tooltip is closed

	(hblock
		(style
			(width = "TT_CONFIG_OPTION_WIDTH")
			(height = "23px")
			(align = "left|middle")
		)

		(element ItemChooser
			_items = "items"
			_listItemRenderer = "itemRenderer"
			_listItemRendererData = "extraData"
			_choosedItemRenderer = "chosenItemRenderer"
			_choosedItemRendererParams = "extraData"
			_customDropdown = "dropdownRenderer"
			_onItemSelectedEvent = "'ValueSelected'"
			_selectedMaxWidth = "TT_CONFIG_OPTION_CONTROL_WIDTH + 18"
			_dropDownWidth = "250"
			_maxDropDownHeight = "350"
			_curIndex = "prefValue"
			(style
				(width = "TT_CONFIG_OPTION_CONTROL_WIDTH + 18")
				(marginRight = "TT_CONFIG_OPTION_VALUE_WIDTH + TT_CONFIG_OPTION_VALUE_MARGIN - 18")
				(align = "middle|center")
			)
		)

		(controller $Instance renderer='ImageButton'
			(bind enabled "prefValue != defaultValue")
			(args
				_width = "TT_CONFIG_RESET_BUTTON_SIZE"
				_height = "TT_CONFIG_RESET_BUTTON_SIZE"
				_backgroundImage = 'url:../service_kit/buttons/context/update.png'
				_tooltipText = "'IDS_PREFERENCES_CONTEXT_PREF_RESET'"
				_methods = "resetMethods"
			)
		)
	)
)

# DropDown for Color Palette
(def element TT_ColorPaletteDropdownElement (_items:array=[], _listItemRenderer:str='TT_DropdownColorPaletteItemRendererElement', _curItemIndex:number=0, _listItemRendererData:gfx={},
									_dropDownWidth:number=140, _maxDropDownHeight:number=220) layout=true
	(scope
		(var dockDataEntity:gfx = "$datahub.getSingleEntity(CC.dockData)")
		(var isShipOverviewEnabled:bool = "dockDataEntity ? dockDataEntity.dockData.isShipOverviewEnabled : false" (event "dockDataEntity.dockData.evIsShipOverviewEnabledChanged"))

		
		(var itemHeight:number = "INFOTIP_DEFAULT_TEXT_LIST_ITEM_RENDERER_ITEM_HEIGHT")
		(var infotipHeight:number = "_maxDropDownHeight >= _items.length * itemHeight	? _items.length * itemHeight
																						: _maxDropDownHeight")
		(var dropDownWidth:number = "TT_CONFIG_COLOR_PALETTE_SIZE * 8")
		
	)

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND "true")

	(style
		(position = "absolute")
		(bind width "dropDownWidth")
		(backgroundImage = 'url:../service_kit/panel_backgrounds/infotip_panel.png')
		(scale9grid = 3)
		(bind hitTest "!isShipOverviewEnabled")
		(bind maxHeight "infotipHeight")
	)

	(controller $Animation
		(bindcall play
			duration = "isShipOverviewEnabled ? 0.4 : 0.25"
			delay	 = "!isShipOverviewEnabled ? 0.15 : 0.5"
			easing	 = "Easing.quad_in"
			from	 = { alpha: 1 }
			to		 = { alpha: 0 }
			reverse	 = "!isShipOverviewEnabled"
			(bind trigger "isShipOverviewEnabled")
		)
	)

	(block
		(name = 'ItemChooserDropdown')
		(class $FullsizeAbsolute)
		(style
			(backgroundColor = 0x01000000)
			(hitTest = false)
		)
	)

	(htile
		(style
			(width = "dropDownWidth")
		)

		(controller $Repeat count="_items.length" renderer="_listItemRenderer"
			(itemHeight = "TT_CONFIG_COLOR_PALETTE_SIZE")
			(itemWidth = "TT_CONFIG_COLOR_PALETTE_SIZE")
			(args
				_curItemIndex = "_curItemIndex"
				_listItemRendererData = "_listItemRendererData"
				_itemText = "_items[$index]"
			)
		)
	)
)

# DropDown item renderers for Colors with Text and Color Palette
# They share the same chosen item render.
(def element TT_DropdownColorPaletteItemRendererElement (_curItemIndex:number=0, _itemText:str='', _listItemRendererData:gfx={}, _isInactive:bool=false) layout=true
	(scope
		(event evAddedToStage)
		(event evMenuClosed)

		(macro MOUSE_HANDLER_SCOPE)
		(var isSelected:bool = "_curItemIndex == $index")

		(var color:number = "_itemText in _listItemRendererData ? _listItemRendererData[_itemText] + 0xFF000000 : 0xFF000000")

		(macro TT_GET_UPREFS)
		(macro TT_GET_LANGUAGE_INDEX)
		(var colorTranslations:array = "_itemText in TT_CONFIG_LOCALIZATIONS ? TT_CONFIG_LOCALIZATIONS[_itemText] : []")
		(var isValidLocalization:bool = "colorTranslations.length > languageIndex && !isIn(colorTranslations[languageIndex], ['', ' '])")
		(var localizedText:str = "isValidLocalization ? colorTranslations[languageIndex] : colorTranslations[0]")
	)

	(bind name "_itemText")
	(style
		(width = "TT_CONFIG_COLOR_PALETTE_SIZE")
		(height = "TT_CONFIG_COLOR_PALETTE_SIZE")
		(align = "middle|center")
	)
	
	(block
		(controller $Animation
			(bindcall play
				duration = 0.05
				from	 = { alpha: 1 }
				to		 = { alpha: 0.7 }
				reverse	 = "!(mouseDown)"
				(bind trigger "mouseDown")
			)
		)

		(class $FullsizeAbsolute)
		(style (hitTest = false) (alpha = 1))

		(block
			(controller $Animation
				(bindcall play
					duration = 0.05
					from	 = { alpha: 1 }
					to		 = { alpha: 1.75 }
					reverse	 = "!(rollOver && !mouseDown)"
					(bind trigger "rollOver && !mouseDown")
				)
			)

			(class $FullsizeAbsolute)
			(style (alpha = 1))

			(block
				(controller $Animation
					(bindcall play
						duration = 0.05
						from	 = { alpha: 0 }
						to		 = { alpha: 0.7 }
						reverse	 = "!(rollOver || isSelected)"
						(bind trigger "rollOver || isSelected")
						(event "evAddedToStage")
					)
				)

				(block
					(controller $Animation
						(bindcall play
							duration = 2
							keyframes = [
								{ percent: 0,	to: {alpha: 0} },
								{ percent: 50, 	to: {alpha: 1.7} },
								{ percent: 100, to: {alpha: 0} },
							]
							repeatCount= -1
							(event "evAddedToStage")
						)
					)
					(bind visible "isSelected")
					(class $FullsizeAbsolute)
					(style
						(scale9grid = 3)
						(bind backgroundImage "_isInactive ? '' : 'url:../service_kit/panel_backgrounds/menu_item_panel.png'")
					)
					(bind colorTransform "{redOffset: 0xEE, greenOffset: 0xEE, blueOffset: 0xEE}")
				)

				(class $FullsizeAbsolute)
				(style
					(scale9grid = 3)
					(bind backgroundImage "_isInactive ? '' : 'url:../service_kit/panel_backgrounds/menu_item_panel.png'")
				)
			)
		)
	)
	

	(block
		(style
			(bind alpha "_isInactive ? 0.5 : 1")
			(width = "TT_CONFIG_COLOR_PALETTE_SIZE - 10px")
			(height = "TT_CONFIG_COLOR_PALETTE_SIZE - 10px")
			(bind backgroundColor "color")
		)
		(bind name "'menu_item_' + _itemText")
	)

	(controller $Tooltip
		(bind enabled "localizedText")
		(renderer = 'SimpleStatusTooltip')
		(args
			_text = "localizedText"
		)
		(macro TT_TOOLTIP_BEHAVIOUR)
	)

	(dispatch evMenuClosed dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))
	(dispatch evAddedToStage dir="EventDirection.NONE" on=addedToStage)
	(dispatch "'evItemChooserInner'" args="{ _curItemIndex: $index }" dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))

	(macro MOUSE_HANDLER
		_enabled = "!_isInactive"
		_soundSet = "'button_default'"
	)
)

(def element TT_DropdownColorItemRendererElement (_curItemIndex:number=0, _itemText:str='', _listItemRendererData:gfx={}, _isInactive:bool=false) layout=true
	(scope
		(event evAddedToStage)
		(event evMenuClosed)

		(macro MOUSE_HANDLER_SCOPE)
		(var isSelected:bool = "_curItemIndex == $index")

		(var color:number = "_itemText in _listItemRendererData ? _listItemRendererData[_itemText] + 0xFF000000 : 0xFF000000")

		(macro TT_GET_UPREFS)
		(macro TT_GET_LANGUAGE_INDEX)
		(var colorTranslations:array = "_itemText in TT_CONFIG_LOCALIZATIONS ? TT_CONFIG_LOCALIZATIONS[_itemText] : []")
		(var isValidLocalization:bool = "colorTranslations.length > languageIndex && !isIn(colorTranslations[languageIndex], ['', ' '])")
		(var localizedText:str = "isValidLocalization ? colorTranslations[languageIndex] : colorTranslations[0]")
	)

	(bind name "_itemText")
	(style
		(width = 100%)
		(height = "INFOTIP_DEFAULT_TEXT_LIST_ITEM_RENDERER_ITEM_HEIGHT")
	)
	
	(block
		(controller $Animation
			(bindcall play
				duration = 0.05
				from	 = { alpha: 1 }
				to		 = { alpha: 0.7 }
				reverse	 = "!(mouseDown)"
				(bind trigger "mouseDown")
			)
		)

		(class $FullsizeAbsolute)
		(style (hitTest = false) (alpha = 1))

		(block
			(controller $Animation
				(bindcall play
					duration = 0.05
					from	 = { alpha: 1 }
					to		 = { alpha: 1.75 }
					reverse	 = "!(rollOver && !mouseDown)"
					(bind trigger "rollOver && !mouseDown")
				)
			)

			(class $FullsizeAbsolute)
			(style (alpha = 1))

			(block
				(controller $Animation
					(bindcall play
						duration = 0.05
						from	 = { alpha: 0 }
						to		 = { alpha: 0.7 }
						reverse	 = "!(rollOver || isSelected)"
						(bind trigger "rollOver || isSelected")
						(event "evAddedToStage")
					)
				)

				(class $FullsizeAbsolute)
				(style
					(scale9grid = 3)
					(bind backgroundImage "_isInactive ? '' : 'url:../service_kit/panel_backgrounds/menu_item_panel.png'")
				)
			)
		)
	)
	

	(block
		(style
			(bind alpha "_isInactive ? 0.5 : 1")
			(align = "middle|center")
			(width = 100%)
			(height = 100%)
		)
		(bind name "'menu_item_' + _itemText")

		(block
			(style
				(position = "absolute")
				(bind backgroundColor "color")
				(width = "20px")
				(height = 20px)
				(vcenter = 0)
				(left = 20px)
			)
		)

		(tf
			(bind class "isSelected ? '$DropdownSimpleOptionTextSelected': '$DropdownSimpleOptionText'")
			(style
				(alpha = "TA")
				(elideMode = true)
				(textAlign = "center")
			)

			(bind text "localizedText")
		)
	)

	(dispatch evMenuClosed dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))
	(dispatch evAddedToStage dir="EventDirection.NONE" on=addedToStage)
	(dispatch "'evItemChooserInner'" args="{ _curItemIndex: $index }" dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))

	(macro MOUSE_HANDLER
		_enabled = "!_isInactive"
		_soundSet = "'button_default'"
	)
)

(def element TT_DropdownChosenColorItemRendererElement (_item:str='', _choosedItemRendererParams:gfx={}, _labelMaxWidth:number=0)
	(scope
		(var color:number = "_item in _choosedItemRendererParams ? _choosedItemRendererParams[_item] + 0xFF000000 : 0xFF000000")

		(macro TT_GET_UPREFS)
		(macro TT_GET_LANGUAGE_INDEX)
		(var colorTranslations:array = "_item in TT_CONFIG_LOCALIZATIONS ? TT_CONFIG_LOCALIZATIONS[_item] : []")
		(var isValidLocalization:bool = "colorTranslations.length > languageIndex && !isIn(colorTranslations[languageIndex], ['', ' '])")
		(var localizedText:str = "isValidLocalization ? colorTranslations[languageIndex] : colorTranslations[0]")
	)
	(style
		(height = "L")
		(hitTest = false)
		(flow = "Flow.HORIZONTAL")
		(align = "middle|center")
	)

	(block
		(style
			(bind backgroundColor "color")
			(bind width "localizedText ? 20px : _labelMaxWidth - 10px")
			(height = 20px)
			(marginLeft = 7px)
		)
	)

	(tf
		(bind visible "localizedText")

		(class $TextDefaultBold17NM)
		(class $FontColorBlueish)

		(style
			(maxWidth = "_labelMaxWidth - 20px")
			(marginLeft = 5px)
			(marginRight = 3px)
			#(marginTop = 9px)
			#(marginBottom = 6px)

			(elideMode = true)
			(textAlign = "left")

			(backgroundColor = 0x8000ff00)
		)

		(bind text "localizedText")
	)
)

# DropDown item renderers for Keys
(def element TT_DropdownKeyItemRendererElement (_curItemIndex:number=0, _itemText:str='', _listItemRendererData:gfx={}, _isInactive:bool=false) layout=true
	(scope
		(event evAddedToStage)
		(event evMenuClosed)

		(macro MOUSE_HANDLER_SCOPE)
		(var isSelected:bool = "_curItemIndex == $index")

		(var keyName:str = "_itemText in _listItemRendererData	? '[' + _listItemRendererData[_itemText] + ']'
																: ''")
	)

	(bind name "_itemText")
	(style (width = 100%))

	
	(block
		(controller $Animation
			(bindcall play
				duration = 0.05
				from	 = { alpha: 1 }
				to		 = { alpha: 0.7 }
				reverse	 = "!(mouseDown)"
				(bind trigger "mouseDown")
			)
		)

		(class $FullsizeAbsolute)
		(style (hitTest = false) (alpha = 1))

		(block
			(controller $Animation
				(bindcall play
					duration = 0.05
					from	 = { alpha: 1 }
					to		 = { alpha: 1.75 }
					reverse	 = "!(rollOver && !mouseDown)"
					(bind trigger "rollOver && !mouseDown")
				)
			)

			(class $FullsizeAbsolute)
			(style (alpha = 1))

			(block
				(controller $Animation
					(bindcall play
						duration = 0.05
						from	 = { alpha: 0 }
						to		 = { alpha: 0.7 }
						reverse	 = "!(rollOver || isSelected)"
						(bind trigger "rollOver || isSelected")
						(event "evAddedToStage")
					)
				)

				(class $FullsizeAbsolute)
				(style
					(scale9grid = 3)
					(bind backgroundImage "_isInactive ? '' : 'url:../service_kit/panel_backgrounds/menu_item_panel.png'")
				)
			)
		)
	)
	

	(block
		(class $SimpleDropdownElement)
		(style
			(bind alpha "_isInactive ? 0.5 : 1")
		)

		(tf
			(bind name "'menu_item_' + _itemText")

			(bind class "isSelected ? '$DropdownSimpleOptionTextSelected': '$DropdownSimpleOptionText'")
			(style
				(alpha = "TA")
				(elideMode = true)
				(textAlign = "left")
				(height = 23px)
			)

			(bindcall substitute imageOffset=5 sourceText="keyName + tr(_itemText)" init=true)
		)
	)

	(dispatch evMenuClosed dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))
	(dispatch evAddedToStage dir="EventDirection.NONE" on=addedToStage)
	(dispatch "'evItemChooserInner'" args="{ _curItemIndex: $index }" dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))

	(macro MOUSE_HANDLER
		_enabled = "!_isInactive"
		_soundSet = "'button_default'"
	)
)

(def element TT_DropdownChosenKeyItemRendererElement (_item:str='', _choosedItemRendererParams:gfx={}, _labelMaxWidth:number=0)
	(scope
		(var keyName:str = "_item in _choosedItemRendererParams	? '[' + _choosedItemRendererParams[_item] + ']'
																: ''")
	)
	(style
		(height = "L")
		(hitTest = false)
	)

	(tf
		(class $TextDefaultBold17NM)
		(class $FontColorBlueish)

		(style
			(maxWidth = "_labelMaxWidth")

			(marginLeft = 7px)
			(marginRight = 3px)
			(marginTop = 9px)
			(marginBottom = 6px)

			(elideMode = true)
			(textAlign = "left")

			(backgroundColor = 0x8000ff00)
		)

		(bindcall substitute imageOffset=6 sourceText="keyName + tr(_item)" init=true)
	)
)

# DropDown item renderers for Custom Text
(def element TT_DropdownTextItemRendererElement (_curItemIndex:number=0, _itemText:str='', _listItemRendererData:gfx={}, _isInactive:bool=false) layout=true
	(scope
		(event evAddedToStage)
		(event evMenuClosed)

		(macro MOUSE_HANDLER_SCOPE)
		(var isSelected:bool = "_curItemIndex == $index")

		(macro TT_GET_UPREFS)
		(macro TT_GET_LANGUAGE_INDEX)
		(var translations:array = "_itemText in TT_CONFIG_LOCALIZATIONS ? TT_CONFIG_LOCALIZATIONS[_itemText] : null")
		(var isValidLocalization:bool = "translations.length > languageIndex && !isIn(translations[languageIndex], ['', ' '])")
		(var localizedText:str = "isValidLocalization ? translations[languageIndex] : translations[0]")
	)

	(bind name "_itemText")
	(style
		(width = 100%)
		(align = "middle|center")
	)
	
	(block
		(controller $Animation
			(bindcall play
				duration = 0.05
				from	 = { alpha: 1 }
				to		 = { alpha: 0.7 }
				reverse	 = "!(mouseDown)"
				(bind trigger "mouseDown")
			)
		)

		(class $FullsizeAbsolute)
		(style (hitTest = false) (alpha = 1))

		(block
			(controller $Animation
				(bindcall play
					duration = 0.05
					from	 = { alpha: 1 }
					to		 = { alpha: 1.75 }
					reverse	 = "!(rollOver && !mouseDown)"
					(bind trigger "rollOver && !mouseDown")
				)
			)

			(class $FullsizeAbsolute)
			(style (alpha = 1))

			(block
				(controller $Animation
					(bindcall play
						duration = 0.05
						from	 = { alpha: 0 }
						to		 = { alpha: 0.7 }
						reverse	 = "!(rollOver || isSelected)"
						(bind trigger "rollOver || isSelected")
						(event "evAddedToStage")
					)
				)

				(class $FullsizeAbsolute)
				(style
					(scale9grid = 3)
					(bind backgroundImage "_isInactive ? '' : 'url:../service_kit/panel_backgrounds/menu_item_panel.png'")
				)
			)
		)
	)
	

	(block
		(class $SimpleDropdownElement)
		(style
			(bind alpha "_isInactive ? 0.5 : 1")
			(align = "middle|center")
		)

		(tf
			(bind name "'menu_item_' + _itemText")

			(bind class "isSelected ? '$DropdownSimpleOptionTextSelected': '$DropdownSimpleOptionText'")
			(style
				(alpha = "TA")
				(elideMode = true)
				(textAlign = "center")
			)

			(bind text "localizedText")
		)
	)

	(dispatch evMenuClosed dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))
	(dispatch evAddedToStage dir="EventDirection.NONE" on=addedToStage)
	(dispatch "'evItemChooserInner'" args="{ _curItemIndex: $index }" dir="EventDirection.UP" on='click' (bind enabled "!_isInactive"))

	(macro MOUSE_HANDLER
		_enabled = "!_isInactive"
		_soundSet = "'button_default'"
	)
)

(def element TT_DropdownChosenTextItemRendererElement (_item:str='', _choosedItemRendererParams:gfx={}, _labelMaxWidth:number=0)
	(scope
		(macro TT_GET_UPREFS)
		(macro TT_GET_LANGUAGE_INDEX)
		(var colorTranslations:array = "_item in TT_CONFIG_LOCALIZATIONS ? TT_CONFIG_LOCALIZATIONS[_item] : []")
		(var isValidLocalization:bool = "colorTranslations.length > languageIndex && !isIn(colorTranslations[languageIndex], ['', ' '])")
		(var localizedText:str = "isValidLocalization ? colorTranslations[languageIndex] : colorTranslations[0]")
	)
	(style
		(height = "L")
		(hitTest = false)
		(align = "middle|center")
	)

	(tf
		(class $TextDefaultBold17NM)
		(class $FontColorBlueish)

		(style
			(maxWidth = "_labelMaxWidth")

			(marginLeft = 7px)
			(marginRight = 3px)
			(marginTop = 9px)
			(marginBottom = 6px)

			(elideMode = true)
			(textAlign = "left")

			(backgroundColor = 0x8000ff00)
		)

		(bind text "localizedText")
	)
)

# Minimaps
(def element TT_MinimapSwitchOptionElement (_pref:dict, _userPrefsNum:gfx=null) layout=true
	# args: default
	(scope
		(var prefKey:str = "'key' in _pref ? _pref.key : '' ")

		(var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.minimapOption, prefKey)")
		(var optionEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))

		(var minimapOption:gfx = "optionEntity ? optionEntity.minimapOption : null")
		(var prefValue:bool = "minimapOption ? minimapOption.value > 0 : false" (event "minimapOption.evValueChanged"))

		(var isOptionAvailable:bool = "optionEntity")

		(var defaultValue:bool = "'default' in _pref ? _pref.default : false")
		(var resetMethods:array = "[ { type: 'direct.action', name: 'battle.saveMinimapOption', args: [ minimapOption.key, defaultValue ] } ]")
		(var saveMethods:array = "[ { type: 'direct.action', name: 'battle.saveMinimapOption', args: [ minimapOption.key, !prefValue ] } ]")
	)

	(bind visible "isOptionAvailable")

	(style
		(width = "50%")
	)

	(hblock
		(style
			(width = "TT_CONFIG_OPTION_WIDTH")
			(height = "23px")
			(align = "left|middle")
		)
		(hblock
			(style
				(width = "TT_CONFIG_OPTION_CONTROL_WIDTH")
				(align = "middle|center")
				(marginRight = "TT_CONFIG_OPTION_VALUE_WIDTH + TT_CONFIG_OPTION_VALUE_MARGIN")
			)
			(element SwitchWithoutLabel
				_state = "prefValue"
				_methods = "saveMethods"
			)
		)

		(controller $Instance renderer='ImageButton'
			(bind enabled "prefValue != defaultValue")
			(args
				_width = "TT_CONFIG_RESET_BUTTON_SIZE"
				_height = "TT_CONFIG_RESET_BUTTON_SIZE"
				_backgroundImage = 'url:../service_kit/buttons/context/update.png'
				_tooltipText = "'IDS_PREFERENCES_CONTEXT_PREF_RESET'"
				_methods = "resetMethods"
			)
		)
	)
)

(def element TT_MinimapSliderOptionElement (_pref:dict, _userPrefsNum:gfx=null) layout=true
	# args: min, max, minLabel, maxLabel, step, default, round, 
	(scope
		(event evSliderValueChanged) #slider event
		(event evValueReset) #image button event
		(event evShow)

		(var prefKey:str = "'key' in _pref ? _pref.key : '' ")

		(var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.minimapOption, prefKey)")
		(var optionEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))

		(var minimapOption:gfx = "optionEntity ? optionEntity.minimapOption : null")
		(var prefValue:number = "minimapOption ? minimapOption.value : 0" (event "minimapOption.evValueChanged"))

		(var isOptionAvailable:bool = "optionEntity")

		(var minValue:number = "'min' in _pref ? _pref.min : 0")
		(var maxValue:number = "'max' in _pref ? _pref.max : 100")
		(var minLabel:str = "'minLabel' in _pref ? _pref.minLabel : ''")
		(var maxLabel:str = "'maxLabel' in _pref ? _pref.maxLabel : ''")
		(var step:number = "'step' in _pref ? _pref.step : 1")
		(var steps:number = "round((maxValue - minValue) / step)")
		(var defaultValue:number = "'default' in _pref ? _pref.default : 20")
		(var defaultSliderValue:number = "round((defaultValue - minValue) / step)")
		(var rounding:number = "'round' in _pref ? _pref.round : 0")

		(var sliderValue:number = "round((prefValue - minValue) / step)" watch=false (event "evShow")) # without evShow: when re-opening the tooltip the slider won't update
		(bind sliderValue "$event.value" watch=false init=false (event "evValueReset") (event "evSliderValueChanged"))
		
		(var isMinLabelAvailable:bool = "prefValue == minValue && minLabel")
		(var isMaxLabelAvailable:bool = "prefValue == maxValue && maxLabel")
		(var displayedCount:str = "	isMinLabelAvailable ? minLabel :
									isMaxLabelAvailable ? maxLabel :
									formatFloatingPoint(prefValue, rounding)"
		)
	)

	(bind visible "isOptionAvailable")

	(dispatch evShow args="{}" on='addedToStage')
	(bindcall externalCall 'direct.action' "['battle.saveMinimapOption', [minimapOption.key, $event.value * step + minValue]]" init=false watch=false (event "evSliderValueChanged") (event "evValueReset"))

	(style
		(width = "50%")
	)

	(hblock
		(style
			(width = "TT_CONFIG_OPTION_WIDTH")
			(height = "23px")
			(align = "left|middle")
		)
		(hblock
			(style
				#(width = "TT_CONFIG_OPTION_CONTROL_WIDTH")
				(align = "middle|center")
			)
			(element DefaultSlider
				_value = "sliderValue"
				_intervalsCount = "steps"
				_unitsInStepInterval = "step"
				_width = "TT_CONFIG_OPTION_CONTROL_WIDTH"
			)
			(tf
				(class $TextDefault)
				(alpha = "TA")
				(bind text "displayedCount")
				(style
					(textAlign = "right")
					(marginRight = "TT_CONFIG_OPTION_VALUE_MARGIN")
					(width = "TT_CONFIG_OPTION_VALUE_WIDTH")
				)
			)
		)
		(block
			(bind visible "prefValue != defaultValue")
			(controller $Instance renderer='ImageButton'
				(args
					_width = "TT_CONFIG_RESET_BUTTON_SIZE"
					_height = "TT_CONFIG_RESET_BUTTON_SIZE"
					_backgroundImage = 'url:../service_kit/buttons/context/update.png'
					_tooltipText = "'IDS_PREFERENCES_CONTEXT_PREF_RESET'"
					_dispatchedEv = "'evValueReset'"
					_dispatchParams = "{'value': defaultSliderValue}"
				)
			)
		)
	)
)

(def element TT_MinimapDropdownOptionElement (_pref:dict, _userPrefsNum:gfx=null) layout=true
	(scope
		(event ItemChooser_ValueSelected)
		(event evMenuClosed) #To close dropdown menu when parent tooltip is closed

		(var prefKey:str = "'key' in _pref ? _pref.key : ''")

		(var entityWatcher:gfx = "$datahub.getPrimWatcher(CC.minimapOption, prefKey)")
		(var optionEntity:gfx = "entityWatcher.entity" (event "entityWatcher.event"))

		(var minimapOption:gfx = "optionEntity ? optionEntity.minimapOption : null")
		(var prefValue:number = "minimapOption ? minimapOption.value : 0" (event "minimapOption.evValueChanged"))

		(var isOptionAvailable:bool = "optionEntity")

		(var defaultValue:number = "'default' in _pref ? _pref.default : 0")
		(var items:array = "'dropdownItems' in _pref ? _pref.dropdownItems : []")

		(var type:str = "'dropdownType' in _pref ? _pref.dropdownType : ''")
		(var renderers:dict = "type in TT_DROPWDOWN_RENDERERS ? TT_DROPWDOWN_RENDERERS[type] : {}")

		(var dropdownRenderer:str = "'DROPDOWN' in renderers ? renderers.DROPDOWN : 'ItemChooserDropdown'")
		(var itemRenderer:str = "'ITEM' in renderers ? renderers.ITEM : 'TextListItemRenderer'")
		(var chosenItemRenderer:str = "'CHOSEN_ITEM' in renderers ? renderers.CHOSEN_ITEM : 'DefaultItemChooserPickedItemRenderer'")
		
		(var extraData:dict = "'extraData' in _pref ? _pref.extraData : {}")

		(var resetMethods:array = "[{ type: 'direct.action', name: 'battle.saveMinimapOption', args: [ minimapOption.key, defaultValue ] }]")
	)

	(style
		(width = "50%")
	)

	(bind visible "isOptionAvailable")

	(bindcall externalCall 'direct.action' "['battle.saveMinimapOption', [minimapOption.key, $event.selectedIndex]]" init=false watch=false (event "ItemChooser_ValueSelected"))
	(dispatch evMenuClosed dir="EventDirection.DOWN" args="{}" on='removedFromStage') #To close dropdown menu when parent tooltip is closed

	(hblock
		(style
			(width = "TT_CONFIG_OPTION_WIDTH")
			(height = "23px")
			(align = "left|middle")
		)

		(element ItemChooser
			_items = "items"
			_listItemRenderer = "itemRenderer"
			_listItemRendererData = "extraData"
			_choosedItemRenderer = "chosenItemRenderer"
			_choosedItemRendererParams = "extraData"
			_customDropdown = "dropdownRenderer"
			_onItemSelectedEvent = "'ValueSelected'"
			_selectedMaxWidth = "TT_CONFIG_OPTION_CONTROL_WIDTH + 18"
			_dropDownWidth = "250"
			_maxDropDownHeight = "350"
			_curIndex = "prefValue"
			(style
				(width = "TT_CONFIG_OPTION_CONTROL_WIDTH + 18")
				(marginRight = "TT_CONFIG_OPTION_VALUE_WIDTH + TT_CONFIG_OPTION_VALUE_MARGIN - 18")
				(align = "middle|center")
			)
		)

		(controller $Instance renderer='ImageButton'
			(bind enabled "prefValue != defaultValue")
			(args
				_width = "TT_CONFIG_RESET_BUTTON_SIZE"
				_height = "TT_CONFIG_RESET_BUTTON_SIZE"
				_backgroundImage = 'url:../service_kit/buttons/context/update.png'
				_tooltipText = "'IDS_PREFERENCES_CONTEXT_PREF_RESET'"
				_methods = "resetMethods"
			)
		)
	)
)
#

(def element TT_BackgroundElement()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
	)
	
	(class $FullsizeAbsolute)

	(controller $Instance renderer='InfotipSystemBlur'
		(bind enabled "!isHighContrast")
		(exprs
			(style
				(zindex = "ZIndex.BACKGROUND")
			)
		)
	)

	(mc contrast_panel
		(class $FullsizeAbsolute)
		(style
			(bind alpha "!isHighContrast ? 0.4 : 1.3")
			(hitTest = "true")
		)
	)
)

(def element TT_TooltipConfigElement(_modIndex:number)
	# For mods to directly call the mod config window
	# _modIndex: number 
	# Mod config's index in TT_MODS_CONFIG_LIST
	(scope
		(macro TT_GET_UPREFS)
	)

	(element TT_BackgroundElement)

	(element TT_ModConfigsElement
		_modConfigsData = "TT_MODS_CONFIG_LIST[_modIndex]"
		_userPrefsNum = "_userPrefsNum"
	)
)

(def element TT_ConfigButtonElement (_modIndex:number, _tooltipPosition:number="border", _tooltipAlign:number="innerTop|outerLeft") layout=true
	# For other mods to directly call the config window!
	# _modIndex:number is indexOf(modConfig, TT_MODS_CONFIG_LIST)
	(scope
		(event evHideInfotip)
		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))
		(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))
	)

	(style
		(position = "absolute")
		(width = 30px)
		(height = 30px)
		(align = "middle|center")
	)

	(controller $Tooltip
		(renderer='TT_TooltipConfigElement')
		(args _modIndex = "_modIndex")
		(macro TT_CONFIG_BEHAVIOUR _position="_tooltipPosition" _align="_tooltipAlign")
	)

	(element ButtonSettingsSmall
		(bind visible "isMouseActive")
		(alpha = 0.7)
	)
)

# TODO: fix duplication
(def element TT_HorizontalDivider()
	(style
		(width = 100%)
		(marginTop = 3px)
		(marginBottom = 3px)
		(align = "middle|center")
		(hitTest = false)
		(alpha = 1.5)
	)
	(element HorizontalDividerTwoPx
		(style
			#(width = 90%)
		)
	)
)

# TODO: fix duplication
(def macro TT_HORIZONTAL_DEVIDER() layout=true
	(element HorizontalDividerTwoPx
		(style
			#(paddingLeft = 30)
			#(paddingRight = 30)
			#(width = 90%)
			(marginTop = 5px)
			(marginBottom = 5px)
			(alpha = 2)
		)
	)
)

(def macro TT_GET_UPREFS ()
	(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
	(var _userPrefsNum:gfx = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false (event "userPrefsComponent.evUserPrefsChanged"))
)

(def macro TT_GET_LANGUAGE_INDEX()
	(var languagePrefKey:str = "TT_ELEMENT_NAME + 'Language'")
	(var languageIndex:number = "(_userPrefsNum && isNumber(_userPrefsNum[languagePrefKey])) ? round(_userPrefsNum[languagePrefKey]) : 0")
)

(def macro TT_TOOLTIP_BEHAVIOUR (_priority:expression = "0")

	(bindcall show animation =	{	duration:	"0.15",
									delay:		"0.01",
									easing:		"Easing.cubic_out",
									from:		{ alpha: 0, top: 5 },
									to:			{ alpha: 1, top: 0 }
								}
								on = 'rollOver'
	)

	(bindcall hide animation = {	duration:	"0.05",
									delay:		"0",
									easing:		"Easing.cubic_out",
									from:		{ alpha: 1, top: 0 },
									to:			{ alpha: 0, top: -5}
								}
								on = 'rollOut'
	)

	(offset = {	x: 0, y: 15})

	(screenBoundsOffset = {			left:	10,
									top:	10,
									right:	10,
									bottom:	10 })
	
	(priority = "_priority")

	(align="bottom|right")
	(position="trackMouse")
)

(def macro TT_CONFIG_BEHAVIOUR (_priority:expression = "1", _position:expression="border", _align:expression="innerTop|outerLeft")
	(bindcall show animation =	{	duration:	"0.15",
									easing:		"Easing.quint_in",
									from:		{ alpha: 0, top: 10 },
									to:			{ alpha: 1, top: 0 }
								}
								on='click'
	)

	(bindcall hide animation =	{	duration:	"0.15",
									easing:		"Easing.quint_out",
									from:		{ alpha: 1, top: 0 },
									to:			{ alpha: 0, top: 10 }
								}
								(event "evHideInfotip")
	)
	(screenBoundsOffset = {			left:	"TT_ELEMENT_SIZE.WIDTH",
									top:	"TT_ELEMENT_SIZE.HEIGHT",
									right:	"TT_ELEMENT_SIZE.WIDTH",
									bottom:	"TT_ELEMENT_SIZE.HEIGHT"})
	(position = "_position")
	(align = "_align")
	(priority = "_priority")
)

(def macro TT_GET_USERPREF()
	(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
	(var _userPrefsNum:gfx = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false (event "userPrefsComponent.evUserPrefsChanged"))
)

(def macro TT_GET_PREF_NUMBER (_varName:expression, _pref:expression)
	(var name="_varName" type=number value="_userPrefsNum && isNumber(_userPrefsNum[_pref.key]) ? _pref.min + (round(_userPrefsNum[_pref.key]) * _pref.step) : _pref.default")
)

(def macro TT_GET_PREF_BOOL (_varName:expression, _pref:expression)
	(var name="_varName" type=bool value="_userPrefsNum && isNumber(_userPrefsNum[_pref.key]) ? round(_userPrefsNum[_pref.key]) : _pref.default")
)