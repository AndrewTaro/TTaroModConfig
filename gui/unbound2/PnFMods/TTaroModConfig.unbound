(def constant TT_CONFIG_RENDERER_ELEMENTS {
	TITLE:			'TT_TT_TitleElement',
	CHECKBOX:		'TT_CheckBoxElement',
	SLIDER_FLOAT:	'TT_SliderOption',
	SLIDER_INT:		'TT_SliderOption'
})

(def constant MOD_3DRADAR_CONFIGS [
	{
		sectionTitle: 'Circle Opacity',
		sectionElements: [
			{configTitle: 'Ready',	key: '3dRadarCircleOpacityReady',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 7.0, step:0.1}},
			{configTitle: 'Reload',	key: '3dRadarCircleOpacityReload',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 7.0, step:0.1}},
			{configTitle: 'Active',	key: '3dRadarCircleOpacityActive',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 10.0, step:0.1}},
		]
	},
	{
		sectionTitle: 'Circle Opacity (Enemy in Range)',
		sectionElements: [
			{configTitle: 'Ready',	key: '3dRadarCircleOpacityReadyWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 7.0, step:0.1}},
			{configTitle: 'Reload',	key: '3dRadarCircleOpacityReloadWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 7.0, step:0.1}},
			{configTitle: 'Active',	key: '3dRadarCircleOpacityActiveWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 10.0, step:0.1}},
		]
	},
	#{
	#	sectionTitle: 'Animation',
	#	sectionElements: [
	#		{configTitle: 'Ending Blink Start Time', key: '3dRadarCircleBlinkStartTime', renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_INT", args: {min: 0,	max: 15.0, default: 7.0, step: 1}},
	#	]
	#}
])

#TODO: should get actual numbers from py code
(def constant MOD_3DHYDRO_CONFIGS [
	{
		title: '3D Hydro', renderer: TT_CONFIG_RENDERER_ELEMENTS.TITLE
	},
	{
		title: 'Circle Opacity',
		elements: [
			{title: 'Ready',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
			{title: 'Ready',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
			{title: 'Reload',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
			{title: 'Active',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
		]
	},
	{
		title: 'Animation',
		element: [
			{title: 'Ending Blink Start Time',	min: 0,	max: 15.0, default: 30.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_INT},
		]
	}
])

#TODO: should get actual numbers from py code
(def constant MOD_3DRADIO_CONFIGS [
	{name: 'Cone Opacity',			min: 0,	max: 1.0,	default: 1.0},
	{name: 'Cone Color',			min: 0,	max: 0xFFFFFF,	default: 0xFFFFFF},
])

(def constant MOD_3DRADIO_CONFIGS [
	{
		title: '3D RPF', renderer: TT_CONFIG_RENDERER_ELEMENTS.TITLE
	},
	{
		title: 'Cone',
		elements: [
			{title: 'Opacity',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
			{title: 'Red',		min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
			{title: 'Green',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
			{title: 'Blue',		min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT},
		]
	}
])

(def constant MOD_CONSUMABLESMONITOR_CONFIGS [
	{
		title: 'Consumables Monitor', renderer: TT_CONFIG_RENDERER_ELEMENTS.TITLE
	},
	{
		title: 'Ignore Consumables',
		elements: [
			{title: 'IDS_HELP_CONSUME_TITLE_CRASHCREW',	default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.CHECKBOX},
			{title: 'Reload',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.CHECKBOX},
			{title: 'Active',	min: 0,	max: 1.0, default: 1.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.CHECKBOX},
		]
	},
	{
		title: 'Animation',
		element: [
			{title: 'Ending Blink Start Time',	min: 0,	max: 15.0, default: 15.0, renderer: TT_CONFIG_RENDERER_ELEMENTS.SLIDER_INT},
		]
	}
])

#TODO: should get actual numbers from py code
(def constant MOD_REGENMONITOR_CONFIGS [
	{name: 'Bar Opacity',			min: 0,	max: 1.0,	default: 1.0},
	{name: 'Bar Color',				min: 0,	max: 0xFFFFFF,	default: 0xFFFFFF},
])

#TODO: should get actual numbers from py code
(def constant MOD_MODULESTATEVIEWER_CONFIGS [
	{name: 'Ignore Modules',		min: 0,	max: 1.0,	default: 1.0},
])

#TODO: should get actual numbers from py code
(def constant MOD_SMOKETIMER_CONFIGS [
	{name: 'World Marker Opacity',	min: 0,	max: 1.0,	default: 1.0},
	{name: 'Map Marker Opacity',	min: 0,	max: 0xFFFFFF,	default: 0xFFFFFF},
])

(def constant TT_MODS_CONFIG_LIST [
	{modName: '3D Radar',				configSections: "MOD_3DRADAR_CONFIGS"},
])
	#{modName: '3D Hydro',				configSections: "MOD_3DHYDRO_CONFIGS"},
	#{modName: '3D Radio',				configSections: "MOD_3DRADIO_CONFIGS"},
	#{modName: 'Consumables Monitor',	configSections: "MOD_CONSUMABLESMONITOR_CONFIGS"},
	#{modName: 'Regen Monitor',			configSections: "MOD_REGENMONITOR_CONFIGS"},
	#{modName: 'Module State Viewer',	configSections: "MOD_MODULESTATEVIEWER_CONFIGS"},
	#{modName: 'Smoke Timer',			configSections: "MOD_SMOKETIMER_CONFIGS"},

(def element TTaroModConfig() layout=true
	(scope
		#(var parameterCol:gfx = "$datahub.getCollection(CC.parameter)")
		#(var smokeTimersContainerEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.parameter, 0, 'modSmokeTimerEntityList')" (event "parameterCol.evAdded") (event "parameterCol.evRemoved"))
		#(var dataComponent:gfx = "smokeTimersContainerEntity.data")
	)

	(block
		(mc contrast_panel
			(class $FullsizeAbsolute)
			(style
				(alpha = "0.4")
				(hitTest = false)
			)
		)
		(controller $Repeat renderer='TT_ModElement'
			(bind count "TT_MODS_CONFIG_LIST.length")
			(args "TT_MODS_CONFIG_LIST[$index]")
		)
	)
)

(def element TT_ModElement (modConfigsData:dict)layout=true
	(element TT_ModTitleElement "modConfigsData.modName")
	(controller $Repeat renderer='TT_SectionElement'
		(bind count "modConfigsData.configSections.length")
		(args "modConfigsData.configSections[$index]")
	)
)

(def element TT_SectionElement (sectionData:dict)layout=true
	(element TT_SectionTitleElement "sectionData.sectionTitle")
	(controller $Repeat renderer='TT_ConfigElement'
		(bind count "sectionData.sectionElements.length")
		(args "sectionData.sectionElements[$index]")
	)
)

(def element TT_ConfigElement (configData:dict)layout=true
	(hblock
		(element TT_ConfigTitleElement "configData.configTitle")
		#(macro trace "configData")
		(controller $Instance
			(bind renderer "configData.renderer")
			(args
				_prefKey="configData.key"
				_args="configData.args"
			)
		)
	)
)

(def element TT_ModTitleElement (_title:str) layout=true
	(tf
		(bind text "_title")
		(style
			(marginBottom = 10px)
		)
		(class $TextDefaultBoldNM)
	)
)

(def element TT_SectionTitleElement (_title:str) layout=true
	(tf
		(bind text "_title")
		(style
			(marginLeft = 10px)
			(marginBottom = 10px)
		)
		(class $TextDefaultBoldNM)
	)
)

(def element TT_ConfigTitleElement (_title:str) layout=true
	(tf
		(bind text "_title")
		(style
			(marginLeft = 20px)
			(marginBottom = 10px)
			(width = 80)
		)
		(class $TextDefaultBoldNM)
	)
)

(def element TT_CheckBoxElement () layout=true
)

(def element TT_SliderIntElement () layout=true
)

(def element TT_SliderFloatElement () layout=true
)

(def macro TT_GET_UPREFS ()
	#isActive:expression = if uPrefsNum is active. Using mouseActive is recommended
	(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
	(var userPrefsNum:dict = "userPrefsComponent.userPrefs.chatBoxWidth" (event "userPrefsComponent.evUserPrefsChanged"))
	(var userPrefsBool:dict = "userPrefsComponent.userPrefs.elementsGroupExpand" (event "userPrefsComponent.evUserPrefsChanged"))
)

(def element TT_SliderOption (_prefKey:str, _args:dict) layout=true
	(scope
		(event evSliderValueChanged) #slider event
		(macro TT_GET_UPREFS)
		(var prefKey:str = "_prefKey")
		(var defaultValue:number = "'default' in _args ? _args.default : 0")
		(var minValue:number = "'min' in _args ? _args.min : 0")
		(var maxValue:number = "'max' in _args ? _args.max : 10")
		(var step:number = "'step' in _args ? _args.step : 1")
		(var prefValue:number = "prefKey in userPrefsNum ? round(userPrefsNum[prefKey]) : defaultValue")
		(var displayedCount:str = "minValue + prefValue * step")
	)

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': $event.value + 0.00001, 'name': 'chatBoxWidth', 'subName': prefKey}]" init=false watch=false (event "evSliderValueChanged"))
	#(macro trace "prefKey")
	(block
		(style
			(width = "180px")
			(align = "center")
			(marginLeft = 8px)
			(marginRight = 8px)
		)
		
		(hblock
			(style
				(align = "center|middle")
				(marginBottom = 5px)
			)
			(element DefaultSlider
				_value = "prefValue"
				_intervalsCount = "maxValue"
				_unitsInStepInterval = "step"
				_width = 140
			)
			(tf
				(class $TextDefault)
				(alpha = "TA")
				(bind text "displayedCount")
				(style
					(marginLeft = 5px)
					(width = 40px)
				)
			)
		)
	)
)

(def element TT_OptionButton () layout=true
	(scope
		(event evHideInfotip)
		(event evOnButtonClicked)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var infotipVisible:bool = false)
	)
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))

	(controller $Tooltip
		(renderer='BuildViewerSizeOption')
		(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOnButtonClicked"))
		(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} on='evClickOutside' (event "evHideInfotip"))
		(bind infotipVisible "true" init=false on='evShow')
		(bind infotipVisible "false" init=false on='evHide')
		(priority=1)
		(macro MINIMAP_TOOLTIP_COMMON_PARAMS)
	)

	
	(element ButtonSettingsSmall
		(style
			(position = "absolute") #(right = "-20px") (top = "-18px")
			(left = "3px")
			(top = "3px")
		)
	)
)