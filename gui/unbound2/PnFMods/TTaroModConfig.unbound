(def constant TT_ELEMENT_NAME "'ttaroModConfig'")
(def constant TT_ELEMENT_SIZE {
	WIDTH: 40,
	HEIGHT: 30
})

(def constant TT_CONFIG_RENDERER_ELEMENTS {
	TITLE:			'TT_TT_TitleElement',
	CHECKBOX:		'TT_CheckBoxElement',
	SLIDER_FLOAT:	'TT_SliderOption',
	SLIDER_INT:		'TT_SliderOption'
})

(def constant MOD_3DRADAR_CONFIGS [
	{
		sectionTitle: 'Circle Opacity',
		sectionElements: [
			{configTitle: 'Ready',	titleColor: "SC.Ui_styles.SERVICE_COLORS.WHITE",	key: '3dRadarCircleOpacityReady',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 7.0, step:0.1}},
			{configTitle: 'Reload',	titleColor: "SC.Ui_styles.SERVICE_COLORS.ORANGE",	key: '3dRadarCircleOpacityReload',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 7.0, step:0.1}},
			{configTitle: 'Active',	titleColor: "SC.Ui_styles.SERVICE_COLORS.GREEN",	key: '3dRadarCircleOpacityActive',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 10.0, step:0.1}},
		]
	},
	{
		sectionTitle: 'Circle Opacity (Enemy in Range)',
		sectionElements: [
			{configTitle: 'Ready',	titleColor: "SC.Ui_styles.SERVICE_COLORS.WHITE",	key: '3dRadarCircleOpacityReadyWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 7.0, step:0.1}},
			{configTitle: 'Reload',	titleColor: "SC.Ui_styles.SERVICE_COLORS.ORANGE",	key: '3dRadarCircleOpacityReloadWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 7.0, step:0.1}},
			{configTitle: 'Active',	titleColor: "SC.Ui_styles.SERVICE_COLORS.GREEN",	key: '3dRadarCircleOpacityActiveWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 10.0, step:0.1}},
		]
	}
])

(def constant MOD_3DHYDRO_CONFIGS [
	{
		sectionTitle: 'Circle Opacity',
		sectionElements: [
			{configTitle: 'Ready',	titleColor: "SC.Ui_styles.SERVICE_COLORS.WHITE",	key: '3dHydroCircleOpacityReady',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 2.0, step:0.1}},
			{configTitle: 'Reload',	titleColor: "SC.Ui_styles.SERVICE_COLORS.ORANGE",	key: '3dHydroCircleOpacityReload',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 2.0, step:0.1}},
			{configTitle: 'Active',	titleColor: "SC.Ui_styles.SERVICE_COLORS.GREEN",	key: '3dHydroCircleOpacityActive',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 5.0, step:0.1}},
		]
	},
	{
		sectionTitle: 'Circle Opacity (Enemy in Range)',
		sectionElements: [
			{configTitle: 'Ready',	titleColor: "SC.Ui_styles.SERVICE_COLORS.WHITE",	key: '3dHydroCircleOpacityReadyWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 2.0, step:0.1}},
			{configTitle: 'Reload',	titleColor: "SC.Ui_styles.SERVICE_COLORS.ORANGE",	key: '3dHydroCircleOpacityReloadWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 2.0, step:0.1}},
			{configTitle: 'Active',	titleColor: "SC.Ui_styles.SERVICE_COLORS.GREEN",	key: '3dHydroCircleOpacityActiveWithEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 5.0, step:0.1}},
		]
	}
])

#TODO: should get actual numbers from py code
#Used postfix: PLAYER_RELATION.VALUE_TO_NAME
(def constant MOD_REGENMONITOR_CONFIGS [
	{
		sectionTitle: 'Bar Color (Ally)',
		sectionElements: [
			{configTitle: 'Opacity',	titleColor: "SC.Ui_styles.SERVICE_COLORS.WHITE",	key: 'regenMonitorBarOpacityAlly',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 4.0, step:0.1}},
			{configTitle: 'Red',		titleColor: "0xFFFF6666",	key: 'regenMonitorBarRedAlly',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 9.0, step:0.1}},
			{configTitle: 'Green',		titleColor: "0xFF66FF66",	key: 'regenMonitorBarGreenAlly',renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 9.0, step:0.1}},
			{configTitle: 'Blue',		titleColor: "0xFF6666FF",	key: 'regenMonitorBarBlueAlly',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 9.0, step:0.1}},
		]
	},
	{
		sectionTitle: 'Bar Color (Enemy for Observer)',
		sectionElements: [
			{configTitle: 'Opacity',	titleColor: "SC.Ui_styles.SERVICE_COLORS.WHITE",	key: 'regenMonitorBarOpacityEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10, default: 4.0, step:0.1}},
			{configTitle: 'Red',		titleColor: "0xFFFF6666",	key: 'regenMonitorBarRedEnemy',		renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 9.0, step:0.1}},
			{configTitle: 'Green',		titleColor: "0xFF66FF66",	key: 'regenMonitorBarGreenEnemy'	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 9.0, step:0.1}},
			{configTitle: 'Blue',		titleColor: "0xFF6666FF",	key: 'regenMonitorBarBlueEnemy',	renderer: "TT_CONFIG_RENDERER_ELEMENTS.SLIDER_FLOAT", args: {min: 0, max: 10.0, default: 9.0, step:0.1}},
		]
	},
])

#TODO: should get actual numbers from py code
(def constant MOD_3DRADIO_CONFIGS [

])

(def constant MOD_CONSUMABLESMONITOR_CONFIGS [

])

#TODO: should get actual numbers from py code
(def constant MOD_MODULESTATEVIEWER_CONFIGS [

])

#TODO: should get actual numbers from py code
(def constant MOD_SMOKETIMER_CONFIGS [

])

(def constant TT_MODS_CONFIG_LIST [
	{modName: '3D Radar',				configSections: "MOD_3DRADAR_CONFIGS"},
	{modName: '3D Hydro',				configSections: "MOD_3DHYDRO_CONFIGS"},
	{modName: 'Regen Monitor',			configSections: "MOD_REGENMONITOR_CONFIGS"},
])
	#
	#{modName: '3D Radio',				configSections: "MOD_3DRADIO_CONFIGS"},
	#{modName: 'Consumables Monitor',	configSections: "MOD_CONSUMABLESMONITOR_CONFIGS"},
	#{modName: 'Module State Viewer',	configSections: "MOD_MODULESTATEVIEWER_CONFIGS"},
	#{modName: 'Smoke Timer',			configSections: "MOD_SMOKETIMER_CONFIGS"},

(def element TTaroModConfig() layout=true
	(scope
		(var defaultPos:dict = "{'positionX': 100, 'positionY': 0}")
		(macro DRAGGABLE_GET_DROP_POSITION _wndName="TT_ELEMENT_NAME" _defaults="defaultPos")
	)

	(block
		(style
			(position = absolute)
			(bind left "drogPosX")
			(bind top "drogPosY")
			(width = "TT_ELEMENT_SIZE.WIDTH")
			(height = "TT_ELEMENT_SIZE.HEIGHT")
		)
		(element ModDraggableElement _wndName="TT_ELEMENT_NAME" _defaults="defaultPos" _elmSize="{width: TT_ELEMENT_SIZE.WIDTH, height: TT_ELEMENT_SIZE.HEIGHT}")
		(element TT_OptionButton)
	)
)

(def element TT_ModConfigs ()layout=true
	(mc contrast_panel
		(class $FullsizeAbsolute)
		(style
			(alpha = "0.4")
			(hitTest = "true")
		)
	)

	(controller $Repeat renderer='TT_ModElement'
		(bind count "TT_MODS_CONFIG_LIST.length")
		(args "TT_MODS_CONFIG_LIST[$index]")
	)
)

(def element TT_ModElement (modConfigsData:dict)layout=true
	(style (align = "center"))

	(element TT_ModTitleElement "modConfigsData")

	(controller $Repeat renderer='TT_SectionElement'
		(bind count "modConfigsData.configSections.length")
		(args "modConfigsData.configSections[$index]")
	)
)

(def element TT_SectionElement (sectionData:dict)layout=true
	#(style (align = "center"))
	(macro TT_HorizontalDevider)

	(element TT_SectionTitleElement "sectionData")

	(controller $Repeat renderer='TT_ConfigElement'
		(bind count "sectionData.sectionElements.length")
		(args "sectionData.sectionElements[$index]")
	)
)

(def element TT_ConfigElement (configData:dict)layout=true
	(hblock
		(style
			(align = "middle")
		)

		(element TT_ConfigTitleElement "configData")

		(controller $Instance
			(bind renderer "configData.renderer")
			(args
				_prefKey="configData.key"
				_args="configData.args"
			)
		)
	)
)

(def element TT_ModTitleElement (_data:dict) layout=true
	(scope
		(var titleText:str = "_data.modName")
		(var titleColor:number = "'titleColor' in _data ? _data.titleColor : 0xFFFFFF")
	)
	(tf
		(class $TextDefaultBoldNM)
		(bind text "titleText")
		(style
			(margin = [10, 10, 6, 10])
			(bind textColor "titleColor")
			(fontSize = 17)
		)
	)
)

(def element TT_SectionTitleElement (_data:dict) layout=true
	(scope
		(var titleText:str = "_data.sectionTitle")
		(var titleColor:number = "'titleColor' in _data ? _data.titleColor : 0xFFFFFF")
	)
	(tf
		(class $TextDefaultBoldNM)
		(bind text "titleText")
		(style
			(marginLeft = 10px)
			(marginBottom = 10px)
			(bind textColor "titleColor")
		)
	)
)

(def element TT_ConfigTitleElement (_data:dict) layout=true
	(scope
		(var titleText:str = "_data.configTitle")
		(var titleColor:number = "'titleColor' in _data ? _data.titleColor : 0xFFFFFF")
	)
	(tf
		(bind text "titleText")
		(class $TextDefaultNM)
		(style
			(marginLeft = 30px)
			(marginBottom = 10px)
			(width = 80)
			(bind textColor "titleColor")
		)
	)
	#(macro trace "titleColor")
)

(def element TT_CheckBoxElement () layout=true
)

(def element TT_SliderIntElement () layout=true
)

(def element TT_SliderFloatElement () layout=true
)

(def macro TT_GET_UPREFS ()
	#isActive:expression = if uPrefsNum is active. Using mouseActive is recommended
	(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
	(var userPrefsNum:dict = "userPrefsComponent.userPrefs.chatBoxWidth" (event "userPrefsComponent.evUserPrefsChanged"))
	(var userPrefsBool:dict = "userPrefsComponent.userPrefs.elementsGroupExpand" (event "userPrefsComponent.evUserPrefsChanged"))
)

(def element TT_SliderOption (_prefKey:str, _args:dict) layout=true
	(scope
		(event evSliderValueChanged) #slider event
		(macro TT_GET_UPREFS)
		(var prefKey:str = "_prefKey")
		(var defaultValue:number = "'default' in _args ? _args.default : 0")
		(var minValue:number = "'min' in _args ? _args.min : 0")
		(var maxValue:number = "'max' in _args ? _args.max : 10")
		(var step:number = "'step' in _args ? _args.step : 1")
		(var prefValue:number = "prefKey in userPrefsNum ? round(userPrefsNum[prefKey]) : defaultValue")
		(var displayedCount:str = "minValue + prefValue * step")
		(var resetMethods:array = "[{type: 'inputMapping.onAction', name: 'setUserPref', args: {'value': defaultValue + 0.00001, 'name': 'chatBoxWidth', 'subName': prefKey}}]")
	)

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': $event.value + 0.00001, 'name': 'chatBoxWidth', 'subName': prefKey}]" init=false watch=false (event "evSliderValueChanged"))
	#(macro trace "prefKey")
	(block
		(style
			(width = "220px")
			(align = "left")
			(marginLeft = 8px)
			(marginRight = 8px)
		)
		
		(hblock
			(style
				(align = "center|middle")
				(marginBottom = 5px)
			)
			(element DefaultSlider
				_value = "prefValue"
				_intervalsCount = "maxValue"
				_unitsInStepInterval = "step"
				_width = 140
			)
			(tf
				(class $TextDefault)
				(alpha = "TA")
				(bind text "displayedCount")
				(style
					(marginLeft = 5px)
					(width = 40px)
				)
			)
			(controller $Instance renderer='ImageButton'
				(bind enabled "prefValue != defaultValue")
				(args
					_width = 18
					_height = 18
					_backgroundImage = 'url:../service_kit/buttons/context/update.png'
					_hitAreaMargin = "[-XS, -14, -18, -14]"
					_tooltipText = "'IDS_PREFERENCES_CONTEXT_PREF_RESET'"
					_methods = "resetMethods"
				)
			)
		)
	)
)

(def element TT_OptionButton () layout=true
	(scope
		(event evHideInfotip)
		(event evOnButtonClicked)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var infotipVisible:bool = false)
	)
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))

	(controller $Tooltip
		(renderer='TT_ModConfigs')
		(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOnButtonClicked"))
		(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} on='evClickOutside' (event "evHideInfotip"))
		(bind infotipVisible "true" init=false on='evShow')
		(bind infotipVisible "false" init=false on='evHide')
		(priority=1)
		(macro MINIMAP_TOOLTIP_COMMON_PARAMS)
	)

	(mc contrast_panel
		(class $FullsizeAbsolute)
		(style
			(alpha = "0.4")
			(hitTest = "false")
			(bind visible "isMouseActive")
		)
	)
	
	(element ButtonSettingsSmall
		(style
			(position = "absolute")
			#(right = "-20px")
			#(top = "-18px")
			(left = "3px")
			(top = "3px")
			(bind alpha "isMouseActive ? 1.0 : 0.4")
		)
	)
)

(def macro TT_HorizontalDevider() layout=true
	(element HorizontalDivider
		(style
			(paddingLeft = 10)
			#(marginTop = 5px)
			(marginBottom = 5px)
			(paddingRight = 10)
			(alpha = 2)
		)
	)
)