#IT IS HIGHLY RECOMMENDED "NOT" TO COPY OR REDISTRIBUTE THIS MODULE.
#THESE CODE SNIPPETS ARE ORIGINALLY WRITTEN BY AUTOSPY.
#THIS IS JUST A WORKAROUND UNTIL AUTOSPY OFICIALLY RELEASES A DRAGGABLE-HELPER-MOD.

(def constant DRAGGABLE_MIN_ELEMENT_SIZE 40)

(def element ModDraggableElement (_wndName:str, _defaults:dict, _elmSize:dict=null) layout=true
	(scope
		(var evMouseDown:str = "'evMouseDown' + _wndName")
		(var evMouseUp:str = "'evMouseUp' + _wndName")

		(event name = "evMouseDown")
		(event name = "evMouseUp")

		(macro DRAGGABLE_GET_MOUSE_COMPONENT)
		(macro DRAGGABLE_GET_MOUSE_POSITION isActive="isMouseActive")

		(var __dragMouseDown:bool = "$event.isDown" init=false watch=false (event "$scope[evMouseDown]") (event "$scope[evMouseUp]"))
		(bind __dragMouseDown "false" (event "mouse.evActiveChanged"))

		(macro STAGE_SIZE)

		(macro DRAGGABLE_GET_UPREFS isActive="isMouseActive")
		(macro DRAGGABLE_GET_UPREF_NUM varName = "'positionX'" wndName = "_wndName" defaults = "_defaults")
		(macro DRAGGABLE_GET_UPREF_NUM varName = "'positionY'" wndName = "_wndName" defaults = "_defaults")

		(var diffPosX:number = "mouseX - positionX" init=false watch=false (event "$scope[evMouseDown]"))
		(var diffPosY:number = "mouseY - positionY" init=false watch=false (event "$scope[evMouseDown]"))

		(var curPosX:number = "mouseX - diffPosX")
		(var curPosY:number = "mouseY - diffPosY")

		(var elementWidth:number = "_elmSize ? _elmSize.width : DRAGGABLE_MIN_ELEMENT_SIZE")
		(var elementHeight:number = "_elmSize ? _elmSize.height : DRAGGABLE_MIN_ELEMENT_SIZE")

		(var stageX:number = "stageWidth  - elementWidth")
		(var stageY:number = "stageHeight - elementHeight")

		(var clampedCurPosX:number = "min(max(curPosX, 0), stageX)")
		(var clampedCurPosY:number = "min(max(curPosY, 0), stageY)")

		#(dispatch "'ev' + _wndName" args = "{x: curPosX > 0 ? curPosX : 0, y: curPosY > 0 ? curPosY : 0}" dir=1 (bind enabled "__dragMouseDown && isMouseActive") (bind trigger "curPosX") (bind trigger "curPosY"))
		(dispatch "'ev' + _wndName" args = "{x: clampedCurPosX, y: clampedCurPosY}" dir=1 (bind enabled "__dragMouseDown && isMouseActive") (bind trigger "clampedCurPosX") (bind trigger "clampedCurPosY"))
		(dispatch "'ev' + _wndName + 'IconVisibleChanged'" args = "{visible: __dragMouseDown}" dir=1 (bind trigger "__dragMouseDown"))
	)

	(class $FullsizeAbsolute)
	(style (backgroundColor=0x01000000))
	(mc contrast_panel
		(class $FullsizeAbsolute)
		(bind alpha "0.4")
		(bind visible "isMouseActive")
	)

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': clampedCurPosX + 0.00001, 'name': 'chatBoxWidth', 'subName': _wndName + '_positionX'}]" init=false watch=false (bind trigger "__dragMouseDown"))

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': clampedCurPosY + 0.00001, 'name': 'chatBoxWidth', 'subName': _wndName + '_positionY'}]" init=false watch=false (bind trigger "__dragMouseDown"))

	(dispatch "evMouseDown" args="{isDown: true}" on='mouseDown')

	(dispatch "evMouseUp" args="{isDown: false}" on='mouseUp')

	#(macro trace "$scope")
)

(def macro DRAGGABLE_GET_MOUSE_COMPONENT ()
	#Loads the following variables to the scope:
	#	mouse:gfx = CC.mouse component
	#	isMouseActive:bool = mouse active (ctrl)
	(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
	(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))
)

(def macro DRAGGABLE_GET_MOUSE_POSITION (isActive:expression=true)
	#Args:
	#	isActive:bool = if mouse position update is active. Recommended to use isMouseActive
	#
	#Loads the following variables to the scope:
	#	mouseX:number = mouse position X, UI scale is taken into account
	#	mouseY:number = mouse position Y, UI scale is taken into account
	(event evDraggableMouseOn)
	(var __stage:gfx = "$datahub.getSingleComponent(CC.stage)")
	(dispatch evDraggableMouseOn args={} (event "evEnterFrame") (bind enabled "isActive"))
	(var mouseX:number = "round(mouse.x / __stage.scale)" (event "evDraggableMouseOn"))
	(var mouseY:number = "round(mouse.y / __stage.scale)" (event "evDraggableMouseOn"))
)

(def macro DRAGGABLE_GET_UPREFS (isActive:expression=true)
	#isActive:expression = if uPrefsNum is active. Using mouseActive is recommended
	(var userPrefsEntity:gfx = "$datahub.getSingleEntity(CC.userPrefs)")
	(var _uPrefs:gfx = "userPrefsEntity.userPrefs.userPrefs" (event "userPrefsEntity.userPrefs.evUserPrefsChanged"))
	(var _uPrefsNum:bool = "_uPrefs.chatBoxWidth" watch=false)
	(var uPrefsNum:dict = "_uPrefsNum ? _uPrefs.chatBoxWidth : {}" watch=false)
	(bind uPrefsNum "_uPrefs.chatBoxWidth" watch=false init=false (bind enabled "isActive") (bind trigger "_uPrefs.chatBoxWidth"))
)

(def macro DRAGGABLE_GET_UPREF_NUM (wndName:expression, varName:expression, defaults:expression={})
	#!!Use DRAGGABLE_GET_UPREFS befor this!
	(var name = "varName" type=number value="toString(uPrefsNum[wndName + '_' + varName]) != null ? round(uPrefsNum[wndName + '_' + varName]) : defaults[varName]")
)

(def macro DRAGGABLE_GET_DROP_POSITION (_wndName:expression='', _defaults:expression={})
	(event name = "'ev' + _wndName")

	(var name = "'dragDropUserPrefsEntity'" type=gfx value="$datahub.getSingleEntity(CC.userPrefs)")
	(var name = "'dragDropUserPrefsNum'" type=gfx value="dragDropUserPrefsEntity.userPrefs.userPrefs.chatBoxWidth")
	(var name = "'drogPosX'" type=number value="toString(dragDropUserPrefsNum[_wndName + '_' + 'positionX']) != null ? round(dragDropUserPrefsNum[_wndName + '_' + 'positionX']) : _defaults['positionX']" watch=false)
	(var name = "'drogPosY'" type=number value="toString(dragDropUserPrefsNum[_wndName + '_' + 'positionY']) != null ? round(dragDropUserPrefsNum[_wndName + '_' + 'positionY']) : _defaults['positionY']" watch=false)

	(bind drogPosX "$event.x" init=false watch=false (event "$scope['ev' + _wndName]"))
	(bind drogPosY "$event.y" init=false watch=false (event "$scope['ev' + _wndName]"))
)